// Generated by https://quicktype.io

export interface ITicketSchemaDefinition {
    ticketSchema: ITicketSchema;
}

export interface ITicketSchema {
    titolo:              Titolo;
    stato:               Stato;
    prio:                IStringFieldEnum;
    task:                IStringFieldEnum;
    creatoIl:            CreatoIL;
    modificatoIl:        V;
    chiusoIl:            V;
    ticketProcad:        V;
    risoluzione:         Risoluzione;
    visualizzatoIl:      V;
    visualizzatoDa:      V;
    _cliente:            Cliente;
    _tecnico:            Tecnico;
    eventi:              Eventi;
    "oggettoTest.propA": V;
    "oggettoTest.propB": V;
    "oggettoTest.propC": V;
    subOggetto:          SubOggetto;
    _id:                 ID;
    __v:                 V;
}

export interface V {
    path:        string;
    instance:    Instance;
    validators:  any[];
    setters:     any[];
    getters:     any[];
    options:     SchemaOptionsClass;
    _index:      null;
    enumValues?: any[];
    regExp?:     null;
}

export enum Instance {
    Date = "Date",
    Number = "Number",
    String = "String",
}

export interface SchemaOptionsClass {
}

export interface Cliente {
    path:                  string;
    instance:              string;
    validators:            ClienteValidator[];
    setters:               any[];
    getters:               any[];
    options:               ClienteOptions;
    _index:                null;
    isRequired:            boolean;
    originalRequiredValue: boolean;
}

export interface ClienteOptions {
    ref:      string;
    required: boolean;
}

export interface ClienteValidator {
    message: string;
    type:    string;
}

export interface ID {
    path:       string;
    instance:   string;
    validators: any[];
    setters:    null[];
    getters:    any[];
    options:    IDClass;
    _index:     null;
}

export interface IDClass {
    auto: boolean;
}

export interface Tecnico {
    path:       string;
    instance:   string;
    validators: any[];
    setters:    any[];
    getters:    any[];
    options:    TecnicoOptions;
    _index:     null;
}

export interface TecnicoOptions {
    ref: string;
}

export interface CreatoIL {
    path:         string;
    instance:     Instance;
    validators:   any[];
    setters:      any[];
    getters:      any[];
    options:      CreatoILClass;
    _index:       null;
    defaultValue: number;
}

export interface CreatoILClass {
    default: number;
}

export interface Eventi {
    $isMongooseArray:         boolean;
    path:                     string;
    instance:                 string;
    validators:               any[];
    setters:                  any[];
    getters:                  any[];
    options:                  EventiOptions;
    _index:                   null;
    schema:                   EventiSchema;
    schemaOptions:            SchemaOptionsClass;
    $isMongooseDocumentArray: boolean;
}

export interface EventiOptions {
    type: ObjElement[];
}

export interface ObjElement {
    testo:    CreatoDaClass;
    creatoDa: CreatoDaClass;
    creatoIl: CreatoILClass;
    file:     SchemaOptionsClass;
}

export interface CreatoDaClass {
    trim: boolean;
}

export interface EventiSchema {
    obj:                   ObjElement;
    paths:                 PurplePaths;
    aliases:               SchemaOptionsClass;
    subpaths:              SchemaOptionsClass;
    virtuals:              Virtuals;
    singleNestedPaths:     SchemaOptionsClass;
    nested:                SchemaOptionsClass;
    inherits:              SchemaOptionsClass;
    callQueue:             any[];
    _indexes:              any[];
    methods:               SchemaOptionsClass;
    methodOptions:         SchemaOptionsClass;
    statics:               SchemaOptionsClass;
    tree:                  PurpleTree;
    query:                 SchemaOptionsClass;
    childSchemas:          any[];
    plugins:               Plugin[];
    s:                     S;
    _userProvidedOptions:  UserProvidedOptions;
    options:               SchemaOptions;
    $implicitlyCreated:    boolean;
    $globalPluginsApplied: boolean;
}

export interface UserProvidedOptions {
    minimize: boolean;
    typeKey:  string;
    strict:   boolean;
}

export interface SchemaOptions {
    minimize:           boolean;
    typeKey:            string;
    strict:             boolean;
    id:                 boolean;
    noVirtualId:        boolean;
    _id:                boolean;
    noId:               boolean;
    validateBeforeSave: boolean;
    read:               null;
    shardKey:           null;
    autoIndex:          null;
    discriminatorKey:   string;
    versionKey:         string;
    capped:             boolean;
    bufferCommands:     boolean;
}

export interface PurplePaths {
    testo:    Risoluzione;
    creatoDa: Risoluzione;
    creatoIl: CreatoIL;
    file:     V;
    _id:      ID;
}

export interface Risoluzione {
    enumValues: any[];
    regExp:     null;
    path:       string;
    instance:   Instance;
    validators: any[];
    setters:    null[];
    getters:    any[];
    options:    CreatoDaClass;
    _index:     null;
}

export interface Plugin {
    opts: Opts;
}

export interface Opts {
    deduplicate: boolean;
}

export interface S {
    hooks: Hooks;
}

export interface Hooks {
    _pres:  SchemaOptionsClass;
    _posts: SchemaOptionsClass;
}

export interface PurpleTree {
    testo:    CreatoDaClass;
    creatoDa: CreatoDaClass;
    creatoIl: CreatoILClass;
    file:     SchemaOptionsClass;
    _id:      IDClass;
    id:       TreeID;
}

export interface TreeID {
    path:    string;
    getters: null[];
    setters: any[];
    options: SchemaOptionsClass;
}

export interface Virtuals {
    id: TreeID;
}

export interface IStringFieldEnum {
    enumValues:            string[];
    regExp:                null;
    path:                  string;
    instance:              Instance;
    validators:            IStringEnumValidator[];
    setters:               any[];
    getters:               any[];
    options:               IStringEnumOptions;
    _index:                null;
    defaultValue:          string;
    isRequired:            boolean;
    originalRequiredValue: boolean;
}

export interface IStringEnumOptions {
    enum:     string[];
    default:  string;
    required: boolean;
}

export interface IStringEnumValidator {
    message:     string;
    type:        string;
    enumValues?: string[];
}

export interface Stato {
    enumValues:   string[];
    regExp:       null;
    path:         string;
    instance:     Instance;
    validators:   IStringEnumValidator[];
    setters:      any[];
    getters:      any[];
    options:      StatoOptions;
    _index:       null;
    defaultValue: string;
}

export interface StatoOptions {
    enum:    string[];
    default: string;
}

export interface SubOggetto {
    schema:          TypeClass;
    $isSingleNested: boolean;
    path:            string;
    instance:        string;
    validators:      any[];
    setters:         any[];
    getters:         any[];
    options:         SubOggettoOptions;
    _index:          null;
}

export interface SubOggettoOptions {
    type: TypeClass;
}

export interface TypeClass {
    obj:                   TypeObj;
    paths:                 TypePaths;
    aliases:               SchemaOptionsClass;
    subpaths:              SchemaOptionsClass;
    virtuals:              Virtuals;
    singleNestedPaths:     SchemaOptionsClass;
    nested:                SchemaOptionsClass;
    inherits:              SchemaOptionsClass;
    callQueue:             any[];
    _indexes:              any[];
    methods:               SchemaOptionsClass;
    methodOptions:         SchemaOptionsClass;
    statics:               SchemaOptionsClass;
    tree:                  TypeTree;
    query:                 SchemaOptionsClass;
    childSchemas:          any[];
    plugins:               Plugin[];
    s:                     S;
    _userProvidedOptions:  SchemaOptionsClass;
    options:               SchemaOptions;
    $globalPluginsApplied: boolean;
}

export interface TypeObj {
    propAA: SchemaOptionsClass;
    propBB: SchemaOptionsClass;
}

export interface TypePaths {
    propAA: V;
    propBB: V;
    _id:    ID;
}

export interface TypeTree {
    propAA: SchemaOptionsClass;
    propBB: SchemaOptionsClass;
    _id:    IDClass;
    id:     TreeID;
}

export interface Titolo {
    enumValues:            any[];
    regExp:                null;
    path:                  string;
    instance:              Instance;
    validators:            TitoloValidator[];
    setters:               null[];
    getters:               any[];
    options:               TitoloOptions;
    _index:                null;
    isRequired:            boolean;
    originalRequiredValue: boolean;
}

export interface TitoloOptions {
    required:  boolean;
    minlength: number;
    trim:      boolean;
}

export interface TitoloValidator {
    message:    string;
    type:       string;
    minlength?: number;
}
